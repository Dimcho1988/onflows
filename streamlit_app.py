# -*- coding: utf-8 -*-
import os
import io
import json
import yaml
import time
import pathlib
import requests
import pandas as pd
import numpy as np
import streamlit as st
from datetime import datetime

from strava_streams import StravaClient, build_timeseries_1hz
from normalize import add_percent_columns
from indices import compute_tiz, compute_daily_stress, aggregate_daily_stress, compute_acwr, compute_hr_drift
from calibration import suggest_thresholds
from generator import generate_plan

# -------------------- App setup --------------------
st.set_page_config(page_title="onFlows MVP", layout="wide")

# ---------- Config load/save ----------
def load_config():
    with open("config.yaml", "r", encoding="utf-8") as f:
        return yaml.safe_load(f)

def save_config(cfg):
    with open("config.yaml", "w", encoding="utf-8") as f:
        yaml.safe_dump(cfg, f, allow_unicode=True, sort_keys=False)

CFG = load_config()

def init_state():
    d = CFG["defaults"]
    st.session_state.setdefault("HRmax", d["HRmax"])
    st.session_state.setdefault("CS_run_kmh", d["CS_run_kmh"])
    st.session_state.setdefault("CP_bike_w", d["CP_bike_w"])
    st.session_state.setdefault("strava_token_full", None)
    st.session_state.setdefault("activities_cache", None)
    st.session_state.setdefault("meta_log", [])
init_state()

# ---------- Secrets / OAuth helpers ----------
def app_redirect_uri():
    return st.secrets.get("APP_REDIRECT_URI", "http://localhost:8501")

def strava_oauth_url():
    client_id = st.secrets.get("STRAVA_CLIENT_ID", "")
    redirect = app_redirect_uri()
    scope = "activity:read_all"
    return (
        "https://www.strava.com/oauth/authorize"
        f"?client_id={client_id}"
        f"&redirect_uri={redirect}"
        "&response_type=code"
        f"&scope={scope}"
    )

def exchange_code_for_token(code: str) -> dict:
    url = "https://www.strava.com/oauth/token"
    payload = {
        "client_id": st.secrets["STRAVA_CLIENT_ID"],
        "client_secret": st.secrets["STRAVA_CLIENT_SECRET"],
        "code": code,
        "grant_type": "authorization_code",
    }
    r = requests.post(url, data=payload, timeout=30)
    r.raise_for_status()
    return r.json()

# ---------- Token cache & refresh ----------
TOKEN_PATH = pathlib.Path.home() / ".streamlit" / "onflows_strava_token.json"

def save_token_to_disk(token: dict):
    TOKEN_PATH.parent.mkdir(parents=True, exist_ok=True)
    with open(TOKEN_PATH, "w", encoding="utf-8") as f:
        json.dump(token, f)

def load_token_from_disk():
    if TOKEN_PATH.exists():
        with open(TOKEN_PATH, "r", encoding="utf-8") as f:
            return json.load(f)
    return None

def refresh_access_token(refresh_token: str) -> dict:
    url = "https://www.strava.com/oauth/token"
    payload = {
        "client_id": st.secrets["STRAVA_CLIENT_ID"],
        "client_secret": st.secrets["STRAVA_CLIENT_SECRET"],
        "grant_type": "refresh_token",
        "refresh_token": refresh_token,
    }
    r = requests.post(url, data=payload, timeout=30)
    r.raise_for_status()
    return r.json()

def ensure_strava_token():
    """–í—Ä—ä—â–∞ –≤–∞–ª–∏–¥–µ–Ω access_token. –ü–æ–ª–∑–≤–∞ session_state + –ª–æ–∫–∞–ª–µ–Ω –∫–µ—à –∏ –∞–≤—Ç–æ-—Ä–µ—Ñ—Ä–µ—à."""
    tok = st.session_state.get("strava_token_full") or load_token_from_disk()
    if not tok:
        return None
    if time.time() >= float(tok.get("expires_at", 0)) - 30:
        try:
            tok = refresh_access_token(tok["refresh_token"])
            st.session_state["strava_token_full"] = tok
            save_token_to_disk(tok)
        except Exception as e:
            st.warning(f"–ò–∑—Ç–µ–∫—ä–ª —Ç–æ–∫–µ–Ω. –ù—É–∂–Ω–æ –µ –Ω–æ–≤–æ –≤–ø–∏—Å–≤–∞–Ω–µ –≤ Strava. ({e})")
            return None
    st.session_state["strava_token_full"] = tok
    save_token_to_disk(tok)
    return tok["access_token"]

# ---------- Download helpers ----------
def download_csv_button(df: pd.DataFrame, label: str, filename: str):
    csv = df.to_csv(index=False).encode("utf-8")
    st.download_button(label, data=csv, file_name=filename, mime="text/csv")

def download_excel_button(df: pd.DataFrame, label: str, filename: str):
    buf = io.BytesIO()
    with pd.ExcelWriter(buf, engine="openpyxl") as xw:
        df.to_excel(xw, index=False, sheet_name="Plan")
    st.download_button(label, data=buf.getvalue(), file_name=filename,
                       mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet")

# =========================
# DB Functions (Supabase)
# =========================
import psycopg2
import psycopg2.extras

def _get_conn():
    return psycopg2.connect(st.secrets["DB_URL"])

def _ensure_activities_table():
    ddl = """
    CREATE TABLE IF NOT EXISTS activities (
        id BIGINT PRIMARY KEY,
        name TEXT,
        type TEXT,
        start_date_local TIMESTAMPTZ,
        distance_km DOUBLE PRECISION,
        moving_time_min DOUBLE PRECISION,
        avg_hr DOUBLE PRECISION,
        avg_speed_kmh DOUBLE PRECISION,
        inserted_at TIMESTAMPTZ DEFAULT NOW()
    );
    """
    with _get_conn() as conn:
        with conn.cursor() as cur:
            cur.execute(ddl)
        conn.commit()

def save_activities_to_db(df: pd.DataFrame) -> int:
    required = [
        "id", "name", "type", "start_date_local",
        "distance_km", "moving_time_min", "avg_hr", "avg_speed_kmh",
    ]
    missing = [c for c in required if c not in df.columns]
    if missing:
        st.warning(f"–õ–∏–ø—Å–≤–∞—â–∏ –∫–æ–ª–æ–Ω–∏ –∑–∞ –∑–∞–ø–∏—Å: {missing}")
        return 0

    _ensure_activities_table()

    rows = df[required].copy()
    if rows["start_date_local"].dtype == "object":
        rows["start_date_local"] = pd.to_datetime(rows["start_date_local"], errors="coerce", utc=True)

    data = [tuple(x) for x in rows.to_numpy()]

    upsert_sql = """
        INSERT INTO activities
        (id,name,type,start_date_local,distance_km,moving_time_min,avg_hr,avg_speed_kmh)
        VALUES %s
        ON CONFLICT (id) DO UPDATE SET
            name=EXCLUDED.name,
            type=EXCLUDED.type,
            start_date_local=EXCLUDED.start_date_local,
            distance_km=EXCLUDED.distance_km,
            moving_time_min=EXCLUDED.moving_time_min,
            avg_hr=EXCLUDED.avg_hr,
            avg_speed_kmh=EXCLUDED.avg_speed_kmh;
    """
    with _get_conn() as conn:
        with conn.cursor() as cur:
            psycopg2.extras.execute_values(cur, upsert_sql, data, page_size=500)
        conn.commit()
    return len(data)

# -------------------- Sidebar / Navigation --------------------
st.sidebar.title("onFlows")
page = st.sidebar.radio("–ú–µ–Ω—é", ["Strava", "–ò–Ω–¥–µ–∫—Å–∏", "–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä", "–ù–∞—Å—Ç—Ä–æ–π–∫–∏"])

# ============================================================
# STRAVA PAGE (–≤—ä–≤ —Ñ—É–Ω–∫—Ü–∏—è, –∑–∞ –¥–∞ –Ω—è–º–∞ –ø—Ä–æ–±–ª–µ–º–∏ —Å –æ—Ç—Å—Ç—ä–ø–∏)
# ============================================================
def render_strava():
    st.header("Strava ‚Äì OAuth, –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏ 1 Hz —Ç–∞–±–ª–∏—Ü–∞")

    # 1) –ê–∫–æ —Å–º–µ –≤—ä—Ä–Ω–∞—Ç–∏ —Å ?code=...
    params = st.query_params
    if "code" in params:
        try:
            token_data = exchange_code_for_token(params["code"])
            st.session_state["strava_token_full"] = token_data
            save_token_to_disk(token_data)
            st.success("‚úÖ –£—Å–ø–µ—à–µ–Ω –≤—Ö–æ–¥ –≤ Strava!")
            st.query_params.clear()
        except Exception as e:
            st.error(f"–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –æ–±–º–µ–Ω –Ω–∞ –∫–æ–¥ –∑–∞ —Ç–æ–∫–µ–Ω: {e}")

    # 2) –û—Å–∏–≥—É—Ä–∏ –≤–∞–ª–∏–¥–µ–Ω —Ç–æ–∫–µ–Ω
    access_token = ensure_strava_token()
    if not access_token:
        st.markdown("1) –ù–∞—Ç–∏—Å–Ω–∏ –±—É—Ç–æ–Ω–∞ –∑–∞ –≤—Ö–æ–¥ ‚Üí –æ–¥–æ–±—Ä–∏ –¥–æ—Å—Ç—ä–ø–∞ ‚Üí —â–µ —Ç–µ –≤—ä—Ä–Ω–µ —Ç—É–∫.")
        if st.button("üîê –í—Ö–æ–¥ —Å—ä—Å Strava"):
            st.markdown(f"[–û—Ç–≤–æ—Ä–∏ Strava OAuth]({strava_oauth_url()})")
        st.stop()

    client = StravaClient(access_token)

    # 3) –û–±–Ω–æ–≤–∏ –∏ –ø–æ–∫–∞–∂–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    if st.button("üîÑ –û–±–Ω–æ–≤–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏—Ç–µ (–ø–æ—Å–ª–µ–¥–Ω–∏ 10)"):
        try:
            acts = client.get_athlete_activities(per_page=10)
            st.session_state["activities_cache"] = acts
            st.success("–ó–∞—Ä–µ–¥–µ–Ω–∏ —Å–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ç–µ 10 –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏.")
        except Exception as e:
            st.error(f"–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∑–∞—è–≤–∫–∞ –∫—ä–º Strava: {e}")

    acts = st.session_state.get("activities_cache") or []
    if acts:
        df_acts = pd.DataFrame([{
            "id": a["id"],
            "name": a.get("name"),
            "type": a.get("type"),
            "start_date_local": a.get("start_date_local"),
            "distance_km": round(a.get("distance", 0) / 1000.0, 2),
            "moving_time_min": int(a.get("moving_time", 0) / 60),
            "avg_hr": a.get("average_heartrate", None),
            "avg_speed_kmh": round((a.get("average_speed", 0) or 0) * 3.6, 2),
        } for a in acts])

        st.dataframe(df_acts, use_container_width=True)

        # –∑–∞–ø–∏—Å –≤ Supabase
        try:
            n = save_activities_to_db(df_acts)
            st.success(f"–ó–∞–ø–∏—Å–∞–Ω–∏/–æ–±–Ω–æ–≤–µ–Ω–∏ –≤ Supabase: {n} –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏.")
        except Exception as e:
            st.warning(f"–ó–∞–ø–∏—Å—ä—Ç –∫—ä–º Supabase –Ω–µ —É—Å–ø—è: {e}")
    else:
        st.info("–ù—è–º–∞ –∫–µ—à–∏—Ä–∞–Ω–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏. –ù–∞—Ç–∏—Å–Ω–∏ ‚Äû–û–±–Ω–æ–≤–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏—Ç–µ‚Äú.")

    # 4) 1 Hz —Ç–∞–±–ª–∏—Ü–∞ –∑–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç
    activity_id = st.text_input("–í—ä–≤–µ–¥–∏ activity_id –∑–∞ 1 Hz —Ç–∞–±–ª–∏—Ü–∞:", placeholder="–Ω–∞–ø—Ä. 1234567890")
    if st.button("‚¨áÔ∏è –î—ä—Ä–ø–∞–π streams –∏ –Ω–∞–ø—Ä–∞–≤–∏ 1 Hz"):
        if not activity_id.strip().isdigit():
            st.warning("–ú–æ–ª—è, –≤—ä–≤–µ–¥–∏ –≤–∞–ª–∏–¥–µ–Ω activity_id (—á–∏—Å–ª–æ).")
            st.stop()
        try:
            streams = client.get_activity_streams(int(activity_id))
            df_1hz = build_timeseries_1hz(streams)
            if df_1hz.empty:
                st.error("–ù–µ—É—Å–ø–µ—Ö –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∏—Ä–∞–Ω–µ –Ω–∞ 1 Hz —Ç–∞–±–ª–∏—Ü–∞ (–ª–∏–ø—Å–≤–∞ time stream).")
                st.stop()

            st.success(f"1 Hz —Ç–∞–±–ª–∏—Ü–∞: {len(df_1hz)} —Ä–µ–¥–∞.")
            st.dataframe(df_1hz.head(300), use_container_width=True)

            # Download CSV
            dl = df_1hz.reset_index().rename(columns={"second": "t_sec"})
            download_csv_button(dl, "üíæ Download 1Hz CSV", f"activity_{activity_id}_1hz.csv")

            # –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∑–∞ –ø—Ä–∞–≥–æ–≤–µ
            rec = suggest_thresholds(df_1hz)
            if rec:
                st.info(f"–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏ –ø—Ä–∞–≥–æ–≤–µ (–æ—Ä–∏–µ–Ω—Ç–∏—Ä): {rec}")
        except Exception as e:
            st.error(f"–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –¥—ä—Ä–ø–∞–Ω–µ –Ω–∞ streams: {e}")

# ============================================================
# INDICES PAGE (—Å—ä–∫—Ä–∞—Ç–µ–Ω–æ ‚Äì –æ—Å—Ç–∞–≤–∏ —Å–∏ —Ç–≤–æ—è –ª–æ–≥–∏–∫–∞ –∞–∫–æ –∏—Å–∫–∞—à)
# ============================================================
def render_indices():
    st.header("–ò–Ω–¥–µ–∫—Å–∏ ‚Äì TIZ, –¥–Ω–µ–≤–µ–Ω —Å—Ç—Ä–µ—Å, ACWR, HR drift")
    uploaded = st.file_uploader("–ö–∞—á–∏ 1 Hz CSV (–æ—Ç 'Strava' —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ç–∞)", type=["csv"])
    mode = st.selectbox("–†–µ–∂–∏–º –∑–∞ TIZ", ["hr", "pct_cs", "pct_cp"], index=0)

    if uploaded:
        df = pd.read_csv(uploaded).rename(columns={"t_sec": "second"}).set_index("second")
        zones_cfg = CFG["zones"]
        df = add_percent_columns(
            df,
            cs_run_kmh=float(st.session_state["CS_run_kmh"]),
            cp_bike_w=float(st.session_state["CP_bike_w"]),
            hrmax=float(st.session_state["HRmax"]),
            zones_cfg=zones_cfg,
        )
        tiz = compute_tiz(df, mode=mode, zones_cfg=zones_cfg)
        st.subheader("–í—Ä–µ–º–µ –≤ –∑–æ–Ω–∏ (–º–∏–Ω)")
        st.dataframe(tiz.to_frame(name="–º–∏–Ω"), use_container_width=True)

        stress = compute_daily_stress(df)
        st.metric("–°—Ç—Ä–µ—Å (–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç)", f"{int(stress)}")

        drift = compute_hr_drift(df)
        if np.isnan(drift):
            st.info("HR drift: –Ω–µ–¥–æ—Å—Ç–∞—Ç—ä—á–Ω–∏ –¥–∞–Ω–Ω–∏.")
        else:
            st.metric("HR drift (decoupling)", f"{drift*100:.1f}%")

        date_str = st.text_input("–î–∞—Ç–∞ –Ω–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—Ç–∞ (YYYY-MM-DD)", value=datetime.now().strftime("%Y-%m-%d"))
        if st.button("‚ûï –î–æ–±–∞–≤–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—Ç–∞ –≤ –¥–Ω–µ–≤–Ω–∏—è —Å—Ç—Ä–µ—Å"):
            st.session_state["meta_log"].append({"date": date_str, "stress": stress})
            st.success("–î–æ–±–∞–≤–µ–Ω–æ. –î–æ–ª—É –≤–∏–∂ ACWR.")

    st.subheader("ACWR (7/28)")
    if st.session_state["meta_log"]:
        meta_df = pd.DataFrame(st.session_state["meta_log"])
        meta_df["date"] = pd.to_datetime(meta_df["date"])
        series = aggregate_daily_stress(meta_df.assign(date=pd.to_datetime(meta_df["date"])))
        acwr = compute_acwr(series)
        if not acwr.empty:
            latest_date = acwr.index.max()
            st.metric("–ü–æ—Å–ª–µ–¥–µ–Ω ACWR", f"{acwr.loc[latest_date]:.2f}")
        st.write("–î–Ω–µ–≤–µ–Ω —Å—Ç—Ä–µ—Å (–ø–æ –¥–∞—Ç–∏):")
        st.dataframe(series.to_frame(name="stress"), use_container_width=True)
    else:
        st.info("–î–æ–±–∞–≤–∏ –ø–æ–Ω–µ –µ–¥–Ω–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç —Å –¥–∞—Ç–∞, –∑–∞ –¥–∞ –≤–∏–¥–∏—à ACWR.")

# ============================================================
# GENERATOR PAGE (—Å—ä–∫—Ä–∞—Ç–µ–Ω–æ)
# ============================================================
def render_generator():
    st.header("–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä ‚Äì —Å–µ–¥–º–∏—á–µ–Ω –ø–ª–∞–Ω —Å –∞–¥–∞–ø—Ç–∞—Ü–∏—è –ø–æ ACWR")
    latest_acwr = 1.0
    if st.session_state.get("meta_log"):
        meta_df = pd.DataFrame(st.session_state["meta_log"])
        meta_df["date"] = pd.to_datetime(meta_df["date"])
        series = aggregate_daily_stress(meta_df)
        acwr = compute_acwr(series)
        if len(acwr):
            latest_acwr = float(acwr.iloc[-1])

    st.write(f"–¢–µ–∫—É—â ACWR (–∞–∫–æ –∏–º–∞ –¥–∞–Ω–Ω–∏): **{latest_acwr:.2f}**")

    base_calendar = ["–ü–æ–Ω", "–í—Ç–æ", "–°—Ä—è", "–ß–µ—Ç", "–ü–µ—Ç", "–°—ä–±", "–ù–µ–¥"]
    athlete_state = {
        "HRmax": float(st.session_state["HRmax"]),
        "CS_run_kmh": float(st.session_state["CS_run_kmh"]),
        "CP_bike_w": float(st.session_state["CP_bike_w"]),
    }
    indices_ctx = {"acwr_latest": latest_acwr}
    plan = generate_plan(athlete_state, indices_ctx, base_calendar, CFG)
    st.dataframe(plan, use_container_width=True)
    download_excel_button(plan, "üíæ Download —Å–µ–¥–º–∏—á–µ–Ω –ø–ª–∞–Ω (Excel)", "onflows_week_plan.xlsx")

# ============================================================
# SETTINGS PAGE (editable)
# ============================================================
def render_settings():
    st.header("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚Äì HRmax / CS / CP –∏ –∑–æ–Ω–∏ (—Ä–µ–¥–∞–∫—Ü–∏—è)")
    with st.form("settings_form"):
        col1, col2, col3 = st.columns(3)
        with col1:
            hrmax_val = st.number_input("HRmax (bpm)", min_value=120, max_value=230,
                                        value=int(st.session_state["HRmax"]))
        with col2:
            cs_val = st.number_input("CS (–±—è–≥–∞–Ω–µ) km/h", min_value=8.0, max_value=26.0,
                                     value=float(st.session_state["CS_run_kmh"]), step=0.1)
        with col3:
            cp_val = st.number_input("CP (–∫–æ–ª–æ–µ–∑–¥–µ–Ω–µ) W", min_value=80, max_value=500,
                                     value=int(st.session_state["CP_bike_w"]))

        st.markdown("### –†–µ–¥–∞–∫—Ü–∏—è –Ω–∞ –∑–æ–Ω–∏")
        zones = CFG["zones"].copy()
        for metric_key, zones_dict in zones.items():
            with st.expander(f"–ó–æ–Ω–∏ –∑–∞: {metric_key}", expanded=False):
                for z_name, bounds in zones_dict.items():
                    c1, c2 = st.columns(2)
                    with c1:
                        lo = st.number_input(f"{metric_key}.{z_name} ‚Äì –¥–æ–ª–Ω–∞ –≥—Ä–∞–Ω–∏—Ü–∞",
                                             key=f"{metric_key}_{z_name}_lo",
                                             value=float(bounds[0]), step=0.01, format="%.2f")
                    with c2:
                        hi = st.number_input(f"{metric_key}.{z_name} ‚Äì –≥–æ—Ä–Ω–∞ –≥—Ä–∞–Ω–∏—Ü–∞",
                                             key=f"{metric_key}_{z_name}_hi",
                                             value=float(bounds[1]), step=0.01, format="%.2f")
                    zones[metric_key][z_name] = [float(lo), float(hi)]

        submitted = st.form_submit_button("üíæ –ó–∞–ø–∞–∑–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è—Ç–∞")
        if submitted:
            st.session_state["HRmax"] = hrmax_val
            st.session_state["CS_run_kmh"] = cs_val
            st.session_state["CP_bike_w"] = cp_val

            CFG["defaults"]["HRmax"] = hrmax_val
            CFG["defaults"]["CS_run_kmh"] = cs_val
            CFG["defaults"]["CP_bike_w"] = cp_val
            CFG["zones"] = zones
            save_config(CFG)
            st.success("–ó–∞–ø–∞–∑–µ–Ω–æ –≤ config.yaml –∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–æ –≤–µ–¥–Ω–∞–≥–∞.")

# -------------------- Router --------------------
if page == "Strava":
    render_strava()
elif page == "–ò–Ω–¥–µ–∫—Å–∏":
    render_indices()
elif page == "–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä":
    render_generator()
elif page == "–ù–∞—Å—Ç—Ä–æ–π–∫–∏":
    render_settings()

