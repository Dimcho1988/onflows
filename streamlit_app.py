import os
import io
import json
import yaml
import time
import base64
import pandas as pd
import numpy as np
import requests
import streamlit as st

from datetime import datetime, timedelta

from strava_streams import StravaClient, build_timeseries_1hz
from normalize import add_percent_columns
from indices import compute_tiz, compute_daily_stress, aggregate_daily_stress, compute_acwr, compute_hr_drift
from calibration import infer_modalities, suggest_thresholds
from generator import generate_plan

st.set_page_config(page_title="onFlows MVP", layout="wide")


# ---------- Helpers ----------
def load_config():
   def save_config(cfg):
    with open("config.yaml", "w", encoding="utf-8") as f:
        import yaml
        yaml.safe_dump(cfg, f, allow_unicode=True, sort_keys=False)

    with open("config.yaml", "r", encoding="utf-8") as f:
        return yaml.safe_load(f)

CFG = load_config()

def init_state():
    d = CFG["defaults"]
    st.session_state.setdefault("HRmax", d["HRmax"])
    st.session_state.setdefault("CS_run_kmh", d["CS_run_kmh"])
    st.session_state.setdefault("CP_bike_w", d["CP_bike_w"])
    st.session_state.setdefault("strava_token", None)
    st.session_state.setdefault("activities_cache", None)
    st.session_state.setdefault("meta_log", [])  # –∑–∞ –¥–Ω–µ–≤–µ–Ω —Å—Ç—Ä–µ—Å
init_state()

def app_redirect_uri():
    # Streamlit Cloud ‚Üí Secrets: APP_REDIRECT_URI
    return st.secrets.get("APP_REDIRECT_URI", "http://localhost:8501")

def strava_oauth_url():
    client_id = st.secrets.get("STRAVA_CLIENT_ID", "")
    redirect = app_redirect_uri()
    scope = "activity:read_all"
    return (
        "https://www.strava.com/oauth/authorize"
        f"?client_id={client_id}"
        f"&redirect_uri={redirect}"
        "&response_type=code"
        f"&scope={scope}"
    )

def exchange_code_for_token(code: str) -> dict:
    url = "https://www.strava.com/oauth/token"
    payload = {
        "client_id": st.secrets["STRAVA_CLIENT_ID"],
        "client_secret": st.secrets["STRAVA_CLIENT_SECRET"],
        "code": code,
        "grant_type": "authorization_code"
    }
    r = requests.post(url, data=payload)
    r.raise_for_status()
    return r.json()

def download_csv_button(df: pd.DataFrame, label: str, filename: str):
    csv = df.to_csv(index=False).encode("utf-8")
    st.download_button(label, data=csv, file_name=filename, mime="text/csv")

def download_excel_button(df: pd.DataFrame, label: str, filename: str):
    buf = io.BytesIO()
    with pd.ExcelWriter(buf, engine="openpyxl") as xw:
        df.to_excel(xw, index=False, sheet_name="Plan")
    st.download_button(label, data=buf.getvalue(), file_name=filename, mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet")


# ---------- Sidebar ----------
st.sidebar.title("onFlows")
page = st.sidebar.radio("–ú–µ–Ω—é", ["Strava", "–ò–Ω–¥–µ–∫—Å–∏", "–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä", "–ù–∞—Å—Ç—Ä–æ–π–∫–∏"])


# ---------- STRAVA PAGE ----------
if page == "Strava":
    st.header("Strava ‚Äì OAuth, –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏ 1 Hz —Ç–∞–±–ª–∏—Ü–∞")

    # 1) OAuth
    params = st.experimental_get_query_params()
    if "code" in params and not st.session_state["strava_token"]:
        try:
            token_data = exchange_code_for_token(params["code"][0])
            st.session_state["strava_token"] = token_data["access_token"]
            st.success("‚úÖ –£—Å–ø–µ—à–µ–Ω –≤—Ö–æ–¥ –≤ Strava!")
            # –ü—Ä–µ–º–∞—Ö–Ω–∏ code –æ—Ç –∞–¥—Ä–µ—Å–∞
            st.experimental_set_query_params()
        except Exception as e:
            st.error(f"–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –æ–±–º–µ–Ω –Ω–∞ –∫–æ–¥ –∑–∞ —Ç–æ–∫–µ–Ω: {e}")

    if not st.session_state["strava_token"]:
        st.markdown("1) –ù–∞—Ç–∏—Å–Ω–∏ –±—É—Ç–æ–Ω–∞ –∑–∞ –≤—Ö–æ–¥ ‚Üí –æ–¥–æ–±—Ä–∏ –¥–æ—Å—Ç—ä–ø–∞ ‚Üí –≤—Ä—ä—â–∞—à —Å–µ —Ç—É–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ.")
        if st.button("üîê –í—Ö–æ–¥ —Å—ä—Å Strava"):
            st.markdown(f"[–û—Ç–≤–æ—Ä–∏ Strava OAuth]({strava_oauth_url()})")
        st.stop()

    client = StravaClient(st.session_state["strava_token"])

    # 2) –°–ø–∏—Å—ä–∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    if st.button("üîÑ –û–±–Ω–æ–≤–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏—Ç–µ (–ø–æ—Å–ª–µ–¥–Ω–∏ 10)"):
        try:
            acts = client.get_athlete_activities(per_page=10)
            st.session_state["activities_cache"] = acts
            st.success("–ó–∞—Ä–µ–¥–µ–Ω–∏ —Å–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ç–µ 10 –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏.")
        except Exception as e:
            st.error(f"–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∑–∞—è–≤–∫–∞ –∫—ä–º Strava: {e}")

    acts = st.session_state.get("activities_cache") or []
    if acts:
        df_acts = pd.DataFrame([{
            "id": a["id"],
            "name": a.get("name"),
            "type": a.get("type"),
            "start_date_local": a.get("start_date_local"),
            "distance_km": round((a.get("distance", 0) or 0)/1000.0, 2),
            "moving_time_min": int((a.get("moving_time", 0) or 0)/60),
            "avg_hr": a.get("average_heartrate", None),
            "avg_speed_kmh": round((a.get("average_speed", 0) or 0)*3.6, 2)
        } for a in acts])
        st.dataframe(df_acts, use_container_width=True)
    else:
        st.info("–ù—è–º–∞ –∫–µ—à–∏—Ä–∞–Ω–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏. –ù–∞—Ç–∏—Å–Ω–∏ ‚Äû–û–±–Ω–æ–≤–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏—Ç–µ‚Äú.")

    # 3) –ò–∑–±–æ—Ä –Ω–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç ‚Üí Streams ‚Üí 1 Hz
    activity_id = st.text_input("–í—ä–≤–µ–¥–∏ activity_id –∑–∞ 1 Hz —Ç–∞–±–ª–∏—Ü–∞:", placeholder="–Ω–∞–ø—Ä. 1234567890")
    if st.button("‚¨áÔ∏è –î—ä—Ä–ø–∞–π streams –∏ –Ω–∞–ø—Ä–∞–≤–∏ 1 Hz"):
        if not activity_id.strip().isdigit():
            st.warning("–ú–æ–ª—è, –≤—ä–≤–µ–¥–∏ –≤–∞–ª–∏–¥–µ–Ω activity_id (—á–∏—Å–ª–æ).")
            st.stop()
        try:
            streams = client.get_activity_streams(int(activity_id))
            df_1hz = build_timeseries_1hz(streams)
            if df_1hz.empty:
                st.error("–ù–µ—É—Å–ø–µ—Ö –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∏—Ä–∞–Ω–µ –Ω–∞ 1 Hz —Ç–∞–±–ª–∏—Ü–∞ (–ª–∏–ø—Å–≤–∞ time stream).")
                st.stop()
            st.success(f"1 Hz —Ç–∞–±–ª–∏—Ü–∞: {len(df_1hz)} —Ä–µ–¥–∞.")
            st.dataframe(df_1hz.head(300), use_container_width=True)
            # Download
            dl = df_1hz.reset_index().rename(columns={"second":"t_sec"})
            download_csv_button(dl, "üíæ Download 1Hz CSV", f"activity_{activity_id}_1hz.csv")

            # –ë—ä—Ä–∑–∞ –∫–∞–ª–∏–±—Ä–∞—Ü–∏—è/–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
            rec = suggest_thresholds(df_1hz)
            if rec:
                st.info(f"–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏ –ø—Ä–∞–≥–æ–≤–µ (–æ—Ä–∏–µ–Ω—Ç–∏—Ä): {rec}")
        except Exception as e:
            st.error(f"–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –¥—ä—Ä–ø–∞–Ω–µ –Ω–∞ streams: {e}")


# ---------- INDICES PAGE ----------
elif page == "–ò–Ω–¥–µ–∫—Å–∏":
    st.header("–ò–Ω–¥–µ–∫—Å–∏ ‚Äì TIZ, –¥–Ω–µ–≤–µ–Ω —Å—Ç—Ä–µ—Å, ACWR, HR drift")

    uploaded = st.file_uploader("–ö–∞—á–∏ 1 Hz CSV (–æ—Ç 'Strava' —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ç–∞)", type=["csv"])
    mode = st.selectbox("–†–µ–∂–∏–º –∑–∞ TIZ", ["hr", "pct_cs", "pct_cp"], index=0)

    if uploaded:
        df = pd.read_csv(uploaded)
        # –æ—á–∞–∫–≤–∞–º–µ t_sec + –∫–æ–ª–æ–Ω–∏ –æ—Ç 1 Hz
        df = df.rename(columns={"t_sec":"second"})
        df = df.set_index("second")

        # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è
        zones_cfg = CFG["zones"]
        df = add_percent_columns(
            df,
            cs_run_kmh=float(st.session_state["CS_run_kmh"]),
            cp_bike_w=float(st.session_state["CP_bike_w"]),
            hrmax=float(st.session_state["HRmax"]),
            zones_cfg=zones_cfg
        )

        # TIZ
        tiz = compute_tiz(df, mode=mode, zones_cfg=zones_cfg)
        st.subheader("–í—Ä–µ–º–µ –≤ –∑–æ–Ω–∏ (–º–∏–Ω)")
        st.dataframe(tiz.to_frame(name="–º–∏–Ω"), use_container_width=True)

        # –î–Ω–µ–≤–µ–Ω —Å—Ç—Ä–µ—Å
        stress = compute_daily_stress(df)
        st.metric("–°—Ç—Ä–µ—Å (–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç)", f"{int(stress)}")

        # HR drift
        drift = compute_hr_drift(df)
        if np.isnan(drift):
            st.info("HR drift: –Ω–µ–¥–æ—Å—Ç–∞—Ç—ä—á–Ω–∏ –¥–∞–Ω–Ω–∏.")
        else:
            st.metric("HR drift (decoupling)", f"{drift*100:.1f}%")

        # –î–æ–±–∞–≤–∏ –≤ –¥–Ω–µ–≤–Ω–∏—è –ª–æ–≥ (–∑–∞ ACWR)
        date_str = st.text_input("–î–∞—Ç–∞ –Ω–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—Ç–∞ (YYYY-MM-DD)", value=datetime.now().strftime("%Y-%m-%d"))
        if st.button("‚ûï –î–æ–±–∞–≤–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—Ç–∞ –≤ –¥–Ω–µ–≤–Ω–∏—è —Å—Ç—Ä–µ—Å"):
            st.session_state["meta_log"].append({"date": date_str, "stress": stress})
            st.success("–î–æ–±–∞–≤–µ–Ω–æ. –û—Ç–∏–¥–∏ –¥–æ–ª—É –∑–∞ ACWR.")

    # ACWR —Å–µ–∫—Ü–∏—è
    st.subheader("ACWR (7/28)")
    if st.session_state["meta_log"]:
        meta_df = pd.DataFrame(st.session_state["meta_log"])
        # –Ω–æ—Ä–º–∞–ª–∏–∑–∏—Ä–∞–π –¥–∞—Ç–∞
        meta_df["date"] = pd.to_datetime(meta_df["date"]).dt.date
        series = aggregate_daily_stress(meta_df.assign(date=pd.to_datetime(meta_df["date"])))
        acwr = compute_acwr(series)
        if not acwr.empty:
            latest_date = acwr.index.max()
            st.metric("–ü–æ—Å–ª–µ–¥–µ–Ω ACWR", f"{acwr.loc[latest_date]:.2f}")
        st.write("–î–Ω–µ–≤–µ–Ω —Å—Ç—Ä–µ—Å:")
        st.dataframe(series.to_frame(name="stress"), use_container_width=True)
    else:
        st.info("–î–æ–±–∞–≤–∏ –ø–æ–Ω–µ –µ–¥–Ω–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç —Å –¥–∞—Ç–∞, –∑–∞ –¥–∞ –≤–∏–¥–∏—à ACWR.")


# ---------- GENERATOR PAGE ----------
elif page == "–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä":
    st.header("–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä ‚Äì —Å–µ–¥–º–∏—á–µ–Ω –ø–ª–∞–Ω —Å –∞–¥–∞–ø—Ç–∞—Ü–∏—è –ø–æ ACWR")

    # –õ–µ–∫ state –æ—Ç ‚Äû–ò–Ω–¥–µ–∫—Å–∏‚Äú
    latest_acwr = 1.0
    if st.session_state.get("meta_log"):
        meta_df = pd.DataFrame(st.session_state["meta_log"])
        meta_df["date"] = pd.to_datetime(meta_df["date"])
        series = aggregate_daily_stress(meta_df)
        acwr = compute_acwr(series)
        if len(acwr):
            latest_acwr = float(acwr.iloc[-1])

    st.write(f"–¢–µ–∫—É—â ACWR (–∞–∫–æ –∏–º–∞ –¥–∞–Ω–Ω–∏): **{latest_acwr:.2f}**")

    # –ö–∞–ª–µ–Ω–¥–∞—Ä/–¥–Ω–∏
    base_calendar = ["–ü–æ–Ω","–í—Ç–æ","–°—Ä—è","–ß–µ—Ç","–ü–µ—Ç","–°—ä–±","–ù–µ–¥"]

    athlete_state = {
        "HRmax": float(st.session_state["HRmax"]),
        "CS_run_kmh": float(st.session_state["CS_run_kmh"]),
        "CP_bike_w": float(st.session_state["CP_bike_w"]),
    }
    indices_ctx = {"acwr_latest": latest_acwr}

    plan = generate_plan(athlete_state, indices_ctx, base_calendar, CFG)
    st.dataframe(plan, use_container_width=True)

    download_excel_button(plan, "üíæ Download —Å–µ–¥–º–∏—á–µ–Ω –ø–ª–∞–Ω (Excel)", "onflows_week_plan.xlsx")


# ---------- SETTINGS PAGE ----------
elif page == "–ù–∞—Å—Ç—Ä–æ–π–∫–∏":
    st.header("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚Äì HRmax / CS / CP –∏ –∑–æ–Ω–∏")

    col1, col2, col3 = st.columns(3)
    with col1:
        st.session_state["HRmax"] = st.number_input("HRmax (bpm)", min_value=120, max_value=230, value=int(st.session_state["HRmax"]))
    with col2:
        st.session_state["CS_run_kmh"] = st.number_input("CS (–±—è–≥–∞–Ω–µ) km/h", min_value=8.0, max_value=26.0, value=float(st.session_state["CS_run_kmh"]), step=0.1)
    with col3:
        st.session_state["CP_bike_w"] = st.number_input("CP (–∫–æ–ª–æ–µ–∑–¥–µ–Ω–µ) W", min_value=80, max_value=500, value=int(st.session_state["CP_bike_w"]))

    st.markdown("–ó–æ–Ω–∏—Ç–µ —Å–∞ –¥–µ—Ñ–∏–Ω–∏—Ä–∞–Ω–∏ –≤ `config.yaml`. –í —Å–ª–µ–¥–≤–∞—â–∏ –≤–µ—Ä—Å–∏–∏ —â–µ –¥–æ–±–∞–≤–∏–º UI –∑–∞ —Ä–µ–¥–∞–∫—Ü–∏—è.")
    st.json(CFG["zones"])

    st.info("–°–µ–∫—Ä–µ—Ç–∏ –∑–∞ Strava/Redirect —Å–µ –¥–æ–±–∞–≤—è—Ç –≤ Streamlit Cloud ‚Üí Settings ‚Üí Secrets:")
    st.code(
        'STRAVA_CLIENT_ID = "XXXX"\n'
        'STRAVA_CLIENT_SECRET = "YYYY"\n'
        'APP_REDIRECT_URI = "https://onflows.streamlit.app"\n',
        language="bash"
    )

    st.markdown("–õ–æ–∫–∞–ª–Ω–æ —Å—Ç–∞—Ä—Ç–∏—Ä–∞–Ω–µ:")
    st.code("pip install -r requirements.txt\nstreamlit run streamlit_app.py", language="bash")
